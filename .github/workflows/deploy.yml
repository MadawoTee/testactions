name: Deploy EC2 with Ansible

on:
  push:
    branches:
      - main
env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  T_VAR_AWS_DEFAULT_REGION: af-south-1 
  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init

      - name: Create EC2 Instance
        run: terraform apply -auto-approve

      - name: Get Key Pair and Public IP
        id: terraform_outputs
        run: |
         
          echo "public_ip=$(terraform output -raw public_ip)" >> "$GITHUB_ENV"
        # env:
        #   AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
        #   AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        #   T_VAR_AWS_DEFAULT_REGION: af-south-1 
    
        #   T_VAR_AWS_DEFAULT_REGION: af-south-1 
     
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          pip install ansible
        if: runner.os == 'Linux'

      - name: Run Ansible Playbook
        run: |
          ansible-playbook -i ${{ env.public_ip }},' -e ${{ env.key_pair_name }} ./ansible-playbook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        if: runner.os == 'Linux'
      # - name: Set up Ansible
      #   uses: appleboy/ansible-action@v1
      #   with:
      #     playbook: ./ansible-playbook.yml
      #   env:
      #     KEY_PAIR: ${{ env.key_pair_name }}
      #     PUBLIC_IP: ${{ env.public_ip }}

      - name: Clean up
        run: terraform destroy -auto-approve
